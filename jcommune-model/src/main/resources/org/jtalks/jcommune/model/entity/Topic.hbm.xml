<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2011  JTalks.org Team
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="org.jtalks.jcommune.model.entity">
    <class name="Topic" table="TOPIC">
        <cache usage="read-write"/>
        <id column="TOPIC_ID" name="id" unsaved-value="0">
            <generator class="native"/>
        </id>
        <property column="UUID" name="uuid" unique="true" not-null="true"/>
        <property column="TITLE" name="title" not-null="true"/>
        <property name="creationDate" type="org.joda.time.contrib.hibernate.PersistentDateTime"
                  column="CREATION_DATE" not-null="true"/>
        <property name="modificationDate" type="org.joda.time.contrib.hibernate.PersistentDateTime"
                  column="MODIFICATION_DATE" not-null="false"/>
        <property name="sticked" column="STICKED" not-null="true"/>
        <property name="views" column="VIEWS"/>
        <property name="announcement" column="ANNOUNCEMENT" not-null="true"/>
        <property name="closed" column="CLOSED" not-null="true"/>

        <list name="posts" cascade="all-delete-orphan">
            <cache usage="nonstrict-read-write"/>
            <key column="TOPIC_ID" foreign-key="FK_TOPIC"/>
            <index column="LIST_INDEX"/>
            <one-to-many class="Post"/>
        </list>

        <many-to-one name="topicStarter" column="TOPIC_STARTER" class="org.jtalks.jcommune.model.entity.JCUser"
                     lazy="false"
                     not-null="true" foreign-key="FK_TOPIC_STARTER"/>
        <many-to-one name="branch" column="BRANCH_ID" class="Branch"
                     not-null="false"/>

        <one-to-one name="poll" class="org.jtalks.jcommune.model.entity.Poll" cascade="all"/>

        <set name="subscribers" table="TOPIC_SUBSCRIPTIONS">
            <key column="TOPIC_ID"/>
            <many-to-many column="USER_ID" class="org.jtalks.jcommune.model.entity.JCUser"/>
        </set>

    </class>

    <query name="getCountTopicsInBranch">
        <![CDATA[SELECT COUNT(topic) FROM Topic topic WHERE topic.branch = :branch]]>
    </query>

    <query name="getTopicsInBranch">
        <![CDATA[SELECT topic FROM Topic topic WHERE topic.branch = :branch 
                 ORDER BY sticked DESC, modificationDate DESC]]>
    </query>

    <query name="getCountRecentTopics">
        <![CDATA[SELECT COUNT(topic) FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id in (:branchIds)]]>
    </query>

    <query name="getRecentTopics">
        <![CDATA[FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id in (:branchIds)
                 ORDER BY modificationDate DESC]]>
    </query>

    <query name="getCountUnansweredTopics">
        <![CDATA[SELECT COUNT(t) FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (:branchIds)]]>
    </query>

    <query name="getUnansweredTopics">
        <![CDATA[FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (:branchIds)
                ORDER BY modificationDate DESC]]>
    </query>

    <sql-query name="getTopicAndCountOfPostsInBranch">
        <return-scalar column="topic" type="string"/>
        <return-scalar column="cposts" type="integer"/>
        SELECT tp.TOPIC_ID as topic, COUNT(*)-1 as cposts FROM TOPIC tp left join POST p ON
        tp.TOPIC_ID=p.TOPIC_ID where BRANCH_ID=:branch group by tp.TOPIC_ID
    </sql-query>

    <sql-query name="markAllTopicsRead">
        INSERT INTO LAST_READ_POSTS(UUID,USER_ID,LAST_READ_POST_INDEX,TOPIC_ID) VALUES(:uuid,:user,:lrpi,:topic)
    </sql-query>

    <sql-query name="deleteAllMarksReadToUser">
        DELETE FROM LAST_READ_POSTS where USER_ID=:user
    </sql-query>


</hibernate-mapping>
