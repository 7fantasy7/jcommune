/**
 * Copyright (C) 2011  JTalks.org Team
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.jtalks.jcommune.service;

import org.jtalks.common.model.entity.User;
import org.jtalks.jcommune.model.entity.JCUser;
import org.jtalks.jcommune.service.dto.UserInfoContainer;
import org.jtalks.jcommune.service.exceptions.MailingFailedException;
import org.jtalks.jcommune.service.exceptions.NotFoundException;

/**
 * This interface should have methods which give us more abilities in manipulating User persistent entity.
 *
 * @author Osadchuck Eugeny
 * @author Kirill Afonin
 */
public interface UserService extends EntityService<JCUser> {
    /**
     * Get {@link JCUser} by username.
     *
     * @param username username of User
     * @return {@link JCUser} with given username
     * @throws NotFoundException if user not found
     * @see JCUser
     */
    JCUser getByUsername(String username) throws NotFoundException;

    /**
     * Try to register {@link JCUser} with given features.
     *
     * @param user user for register
     * @return registered {@link JCUser}
     * @see org.jtalks.jcommune.model.entity.JCUser
     */
    JCUser registerUser(JCUser user);

    /**
     * Gets user currently logged in.
     *
     * @return logged in user or null, if user hasn't yet log in
     */
    JCUser getCurrentUser();

    /**
     * Updates user last login time to current time.
     *
     * @param user user which must be updated
     * @see org.jtalks.jcommune.model.entity.JCUser
     */
    void updateLastLoginTime(JCUser user);

    /**
     * Update user entity.
     *
     * @param info modified profile info holder
     * @return edited user
     */
    JCUser editUserProfile(UserInfoContainer info);

    /**
     * Performs the following:
     * 1. Alters the password for this user to the random string
     * 2. Sends an e-mail with new password to this address to notify user
     * <p/>
     * If mailing fails password won't be changed.
     *
     * @param email address to identify user
     * @throws MailingFailedException if mailing failed
     */
    void restorePassword(String email) throws MailingFailedException;

    /**
     * Activates user account based on uuid passed.
     * We use UUID's to be sure activation link cannot be autogenerated from username.
     *
     * @param uuid unique entity identifier to locate user account
     * @throws NotFoundException if there is no user matching username given
     */
    void activateAccount(String uuid) throws NotFoundException;

    /**
     * This method will be called automatically every hour to check
     * if there are expired user accounts to be deleted. User account
     * is expired if it's created, but not activated for a day or more.
     */
    void deleteUnactivatedAccountsByTimer();

    /**
     * This methods checks a permissions of user to edit profile.
     *
     * @param userId an identifier of user, for which we check permission
     */
    void checkPermissionsToEditProfile(Long userId);

    /**
     * Searches for the common user, meaning that she might or might not be registered in JCommune, she can also be
     * registered by some other JTalks component. This might be required to search through all the users of JTalks.
     *
     * @param username a user's login to find her in the database, depending on the used DB Engine might or might not be
     *                 case-sensitive
     * @return a common user with the specified username
     * @throws NotFoundException if no user was found with the specified username
     */
    User getCommonUserByUsername(String username) throws NotFoundException;
}
